type LMSError = variant {
  NotFound : text;
  ValidationError : text;
  Unauthorized : text;
  AlreadyExists : text;
  InvalidRole : text;
  InternalError : text;
  InitializationError : text;
};

type Result = variant { Ok : principal; Err : LMSError };
type Result_1 = variant { Ok : Tenant; Err : LMSError };
type Result_2 = variant { Ok; Err : LMSError };

type RouterStats = record {
  has_wasm_module : bool;
  routing_entries : nat64;
  tenant_count : nat64;
};

type Tenant = record {
  id : text;
  domain : text;
  name : text;
  canister_id : principal;
  created_at : nat64;
  is_active : bool;
  admin_principal : principal;
};

service : {
  get_router_stats : () -> (RouterStats) query;
  get_routing_table : () -> (vec record { text; principal }) query;
  get_tenant_canister : (text) -> (Result) query;
  health_check : () -> (text) query;
  list_tenants : () -> (vec Tenant) query;
  register_tenant : (text, text, text, text) -> (Result_1);
  register_university : (text, text, principal) -> (Result_1);
  upload_wasm_module : (blob) -> (Result_2);
}
